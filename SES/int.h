/***************************************************************
	int.h
	Диспетчер прерываний.

	RTL2 - Библиотека времени выполнения МСП/ПМКО.

	(с) Д.Гурьев, 2000.
	По заказу НТЦ Модуль.
 ***************************************************************/
/***************************************************************
	История изменений:
	24.10.2005 Гурьев, Мешков
		Добавлена поддержка многооконечного устройства.

 ***************************************************************/

#ifndef INT_H
#define INT_H

#include "types.h"
#include "access.h"
#include "config.h"

#ifdef __cplusplus
extern "C" {
#endif

/***************************************************************
   Доступ к регистрам маски и статуса прерываний.
   Эквивалентны msp_SetVReg/msp_GetVReg, но быстрее
 ***************************************************************/

#define msp_GetIntMask(device) msp_ReadReg(device, mspRR_INTERRUPT_MASK)
#define msp_SetIntMask(device, mask) msp_WriteReg(device, mspRR_INTERRUPT_MASK, mask)
#define msp_GetIntStatus(device) msp_ReadReg(device, mspRR_INTERRUPT_STATUS)

/***************************************************************
   Диспетчер прерываний пользовательского уровня
 ***************************************************************/

//msp_InterruptInfo : информация о прерывании для
//п\п обработки прерываний ползовательского уровня
typedef struct {
	msp_WORD status;		//Копия INTERRUPT STATUS на момент прерывания
							//!! В момент вызова UISR значение INTERRUPT MASK
							//!! Уже может быть другим
							//UISR может изменить это поле (сбросить часть бит),
							//чтобы предотвратить вызов других IUSR
	msp_DEVHANDLE device;	//Дескриптор устройства
	msp_STKHANDLE stack;	//Дескриптор текущего стека команд
	msp_WORD stack_entry;	//№ позиции в стеке команд
	msp_RAMHANDLE object;	//Дескриптор доп. объекта - буфера ОУ, сообщения КШ
} msp_InterruptInfo;

//П\п обработки прерываний пользовательского уровня
typedef void (*msp_UISR)(msp_InterruptInfo* Info);

//Конфигурационная запись для диспетчера прерывания
typedef struct {
	msp_WORD mask;			//маска прерываний
	msp_UISR UISR;			//п\п обработки прерываний
} msp_DispatchInfo;

msp_ERROR msp_UISR_SetTable(msp_DEVHANDLE device, msp_DispatchInfo* Table);
//Конфигурирование диспетчера прерываний пользовательского уровня
//device - устройство
//Table - массив конфгурационных записей
//		признак конца - полностью нулевая запись.
//		Для выключения диспетчера установить Info = NULL
//
//Диспетчер прерываний просматривает массив с начала до конца.
//Каждый раз, когда DispatchInfo->status & InterruptInfo->mask,
//вызывается соответсивующая п\п DispatchInfo->UISR
//
//Приложение может менять содержимое этого массива динамически.

void msp_UISR_Dispatch(msp_DEVHANDLE device);
//Собственно диспетчер. Должен быть ЯВНО установлен в качестве
//обработчика прерываний при помощи msp_SetISR() (access.h)
//либо ЯВНО вызываться из другого оработчика прерываний
//Сбрасывает признак прерывания в устройстве (msp_ResetInterrupt())

void msp_MultiRT_Dispatch(msp_DEVHANDLE device);
//Диспетчер для ОУ в многоабонентском режиме работы.
//Должен быть ЯВНО установлен в качестве
//обработчика прерываний при помощи msp_SetISR() (access.h)
//либо ЯВНО вызываться из другого оработчика прерываний

/***************************************************************
   Диспетчер прерываний по объектам
 ***************************************************************/

msp_ERROR msp_UISR_LinkToHandle(msp_RAMHANDLE handle, 
								msp_UISR UISR);
//Привязывание п\п обработки прервываний к объекту в ОЗУ МСП
//handle - объект, допускается msp_BUFHANDLE или msp_MSGHANDLE
//UISR - п\п обработки прерываний, кот. будет вызываться
//		при возникновении прервываний, связанных с данным объктом
//		Для отмены установить UISR в NULL

void msp_UISR_DispatchToHandle(msp_InterruptInfo* Info);
//Диспетчер прерываний по объектам.
//Сам также соответствует msp_UISR и должен явно устанавливаться
//как обработчик при помощи п\п msp_UISR_SetTable
//Info - информация о прерывании
//Прорамма устанавливает в Info handle соотв. объекта
//и вызывает п\п обработки, связанную с этим объектом
//посредством msp_UISR_LinkToHandle

/***************************************************************/

#ifdef __cplusplus
}
#endif

#endif
